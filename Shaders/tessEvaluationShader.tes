#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float scale;
uniform vec3 viewPos;
uniform sampler2D noisemap;
uniform sampler2D normalmap;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 TexCoordsTC[];

// pass along the interpolated values
out vec3 posES ;
out vec2 TexCoordsES;
out vec3 normES;
out float visibilityES;

void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   TexCoordsES = interpolate2D(TexCoordsTC[0], TexCoordsTC[1], TexCoordsTC[2]) ;


   //Noise Height Mapping and Normals
   posES.y = texture(noisemap,TexCoordsES).r;

   //CDM (TO GET RID OF LATER)
    float right = (textureOffset(noisemap,TexCoordsES,ivec2(1.0,0)).r)*scale;
    float left = (textureOffset(noisemap,TexCoordsES,ivec2(-1.0,0)).r)*scale;
    float up = (textureOffset(noisemap,TexCoordsES,ivec2(0,1.0)).r)*scale;
    float down = (textureOffset(noisemap,TexCoordsES,ivec2(0,-1.0)).r)*scale;

    //Diagonal CDM
    float topright = (textureOffset(noisemap, TexCoordsES, ivec2(1.0, 1.0)).r) * scale;
    float topleft = (textureOffset(noisemap, TexCoordsES, ivec2(-1.0, 1.0)).r) * scale;
    float bottomright = (textureOffset(noisemap, TexCoordsES, ivec2(1.0, -1.0)).r) * scale;
    float bottomleft = (textureOffset(noisemap, TexCoordsES, ivec2(-1.0, -1.0)).r) * scale;

    float lr = left-right;
    float ud = up-down;
    float diag1 = topleft - bottomright;
    float diag2 = topright - bottomleft;

    vec3 normals = normalize(vec3(lr,2.0,ud));
    vec3 diagnormals = normalize(vec3(diag1,2.0,diag2));
    normES = normalize(normals+diagnormals);
    //normES = vec3(texture(normalmap,TexCoordsES).rgb)/scale;


   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   gl_Position = projection * view * vec4(posES, 1.0); 

   //fog stuff
   float G = 0.8;
   float density = 0.002;

   float dist = distance(viewPos,posES);
   visibilityES = exp(-pow((dist*density),G));
   visibilityES = clamp(visibilityES,0.0,1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}