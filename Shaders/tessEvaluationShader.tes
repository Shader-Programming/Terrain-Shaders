#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float scale;
uniform vec3 viewPos;
uniform sampler2D normalmap;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 TexCoordsTC[];

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
};

in patch OutputPatch oPatch;

// pass along the interpolated values
out vec3 posES ;
out vec2 TexCoordsES;
out vec3 normES;
out float visibilityES;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    float uPow3 = pow(u, 3);
    float vPow3 = pow(v, 3);
    float wPow3 = pow(w, 3);
    float uPow2 = pow(u, 2);
    float vPow2 = pow(v, 2);
    float wPow2 = pow(w, 2);


    posES = oPatch.WorldPos_B300 * wPow3 +
                oPatch.WorldPos_B030 * uPow3 +
                oPatch.WorldPos_B003 * vPow3 +
                oPatch.WorldPos_B210 * 3.0 * wPow2 * u +
                oPatch.WorldPos_B120 * 3.0 * w * uPow2 +
                oPatch.WorldPos_B201 * 3.0 * wPow2 * v +
                oPatch.WorldPos_B021 * 3.0 * uPow2 * v +
                oPatch.WorldPos_B102 * 3.0 * w * vPow2 +
                oPatch.WorldPos_B012 * 3.0 * u * vPow2 +
                oPatch.WorldPos_B111 * 6.0 * w * u * v;
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates
   TexCoordsES = interpolate2D(TexCoordsTC[0], TexCoordsTC[1], TexCoordsTC[2]) ;


   //Noise Height Mapping and Normals
   posES.y = texture(normalmap,TexCoordsES).a;
   normES = vec3(texture(normalmap,TexCoordsES).rgb);


   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   gl_Position = projection * view * vec4(posES, 1.0); 

   //fog stuff
   float G = 0.8;
   float density = 0.002;

   float dist = distance(viewPos,posES);
   visibilityES = exp(-pow((dist*density),G));
   visibilityES = clamp(visibilityES,0.0,1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}