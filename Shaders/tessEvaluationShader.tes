#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;


// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float scale;
uniform vec3 viewPos ;
uniform int octaves;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 TexCoordsTC[];

// pass along the interpolated values
out vec3 posES ;
out vec2 TexCoordsES;
out vec3 normES;
out float visibilityES;

float hash(float n);
float snoise(vec3 x);
float noise(vec3 position, int octaves);

void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   TexCoordsES = interpolate2D(TexCoordsTC[0], TexCoordsTC[1], TexCoordsTC[2]) ;


   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   posES.y = noise(posES,octaves);
   gl_Position = projection * view * vec4(posES, 1.0);  

   //fog stuff
   float G = 1.2;
   float density = 0.004;

   float dist = distance(viewPos,posES);
   visibilityES = exp(-pow((dist*density),G));
   visibilityES = clamp(visibilityES,0.0,1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float hash(float n){
    return fract(sin(n)*753.543123);
}

float snoise(vec3 x){
    vec3 p = floor(x);
    vec3 f = fract(x);

    f = f*f*(3-(2*f));

    float n = p.x+p.y*157+113*p.z;

    return mix(mix(mix(hash(n),hash(n+1),f.x),
    mix(hash(n+157),hash(n+158),f.x),f.y),
    mix(mix(hash(n+113),hash(n+114),f.x),
    mix(hash(n+270),hash(n+271),f.x),f.y),f.z);
}

//noise
float noise(vec3 position, int octaves){
    float total = 0.0f;
    float frequency = 0.03;
    float maxamplitude = 0.0f;
    float amplitude = 50;

    for(int i = 0; i < octaves; i++){
        total += snoise(position*frequency)*amplitude;
        frequency *= 2;
        amplitude /= 2;
        maxamplitude += amplitude;
    }
    return (total/maxamplitude)*scale;
}

