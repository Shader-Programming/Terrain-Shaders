// first step of tesselation shader
// tesselation control shader add/deletes control points and determines the tesselatation level
// patch has three control points here (three vertices for each triangle)


#version 450 core
layout (vertices =3) out;


// vectors stored as arrays - each patch has three vertices, each with an xyz pos and xyz norm value 
//posVS = position from Vertex Shader, posTC = position from this Tesselation Control shader

in vec3 posVS[] ;
in vec2 TexCoordsVS[];
in vec3 view[];

out vec3 posTC[] ;
out vec2 TexCoordsTC[];

uniform vec3 viewPos;
uniform int terrainmode;
float GetTessLevel(float distance0, float distance1);

void CalcPositions();
vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal) ;


struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
};

out patch OutputPatch oPatch;

void main()
{
  // tesselation level; we will find this automatically later but for now hardcoded value
   int tessLevel = 4;

   // gpu can calculate each control point in parallel
   // tesselation level same for entire patch so only need to set it once (for the first control point)
   // gl_invocation called for each control point

   CalcPositions();
   float eyetovertexdist0 = distance(viewPos,posVS[0]);
   float eyetovertexdist1 = distance(viewPos,posVS[1]);
   float eyetovertexdist2 = distance(viewPos,posVS[2]);

   gl_TessLevelOuter[0] = GetTessLevel(eyetovertexdist1,eyetovertexdist2) ; 
   gl_TessLevelOuter[1] = GetTessLevel(eyetovertexdist2,eyetovertexdist0) ; 
   gl_TessLevelOuter[2] = GetTessLevel(eyetovertexdist0,eyetovertexdist1) ; 
   gl_TessLevelInner[0] = gl_TessLevelOuter[2];

   // pass through position and tex information
   posTC[gl_InvocationID]  = posVS[gl_InvocationID] ;
   TexCoordsTC[gl_InvocationID]  = TexCoordsVS[gl_InvocationID] ;

}

float GetTessLevel(float distance0, float distance1){
    float avg = (distance0+distance1)/2;

    if(terrainmode == 1){
        if(avg < 150){
            return 15;    
        }else if(avg < 200){
            return 13; 
        }else if(avg < 250){
            return 10; 
        }else if(avg < 300){
            return 8; 
        }else{
            return 5; 
        }
    }else{
        if(avg < 150){
            return 3;    
        }else if(avg < 200){
            return 2; 
        }else{
            return 1;
        }
    }
}

void CalcPositions()
{

    vec3 up = vec3(0,1,0);
    // From Vertex Shader
    oPatch.WorldPos_B030 = posVS[0];
    oPatch.WorldPos_B003 = posVS[1];
    oPatch.WorldPos_B300 = posVS[2];

    // Edges are names according to the opposing vertex
    vec3 EdgeB300 = oPatch.WorldPos_B003 - oPatch.WorldPos_B030;
    vec3 EdgeB030 = oPatch.WorldPos_B300 - oPatch.WorldPos_B003;
    vec3 EdgeB003 = oPatch.WorldPos_B030 - oPatch.WorldPos_B300;

    // Generate two midpoints on each edge
    oPatch.WorldPos_B021 = oPatch.WorldPos_B030 + EdgeB300 / 3.0;
    oPatch.WorldPos_B012 = oPatch.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;
    oPatch.WorldPos_B102 = oPatch.WorldPos_B003 + EdgeB030 / 3.0;
    oPatch.WorldPos_B201 = oPatch.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;
    oPatch.WorldPos_B210 = oPatch.WorldPos_B300 + EdgeB003 / 3.0;
    oPatch.WorldPos_B120 = oPatch.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;

    // Project each midpoint on the plane defined by the nearest vertex and its normal
    oPatch.WorldPos_B021 = ProjectToPlane(oPatch.WorldPos_B021, oPatch.WorldPos_B030,
                                         up);
    oPatch.WorldPos_B012 = ProjectToPlane(oPatch.WorldPos_B012, oPatch.WorldPos_B003,
                                         up);
    oPatch.WorldPos_B102 = ProjectToPlane(oPatch.WorldPos_B102, oPatch.WorldPos_B003,
                                         up);
    oPatch.WorldPos_B201 = ProjectToPlane(oPatch.WorldPos_B201, oPatch.WorldPos_B300,
                                         up);
    oPatch.WorldPos_B210 = ProjectToPlane(oPatch.WorldPos_B210, oPatch.WorldPos_B300,
                                         up);
    oPatch.WorldPos_B120 = ProjectToPlane(oPatch.WorldPos_B120, oPatch.WorldPos_B030,
                                         up);

    // Handle the center
    vec3 Center = (oPatch.WorldPos_B003 + oPatch.WorldPos_B030 + oPatch.WorldPos_B300) / 3.0;
    oPatch.WorldPos_B111 = (oPatch.WorldPos_B021 + oPatch.WorldPos_B012 + oPatch.WorldPos_B102 +
                          oPatch.WorldPos_B201 + oPatch.WorldPos_B210 + oPatch.WorldPos_B120) / 6.0;
    oPatch.WorldPos_B111 += (oPatch.WorldPos_B111 - Center)/2 ;
}

vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, PlaneNormal);
    vec3 d = Len * PlaneNormal;
    return (Point - d);
} 